SET SESSION FOREIGN_KEY_CHECKS=0;

/* ms backsystem install sql for mysql */
/* Drop Tables */

DROP TABLE IF EXISTS COMMENTARY_MEDIA;
DROP TABLE IF EXISTS COMMUNITY_ACTIVITY;
DROP TABLE IF EXISTS COMMUNITY_ATTENTION;
DROP TABLE IF EXISTS COMMUNITY_GROUPS;
DROP TABLE IF EXISTS COMMUNITY_MEDIA;
DROP TABLE IF EXISTS COMMUNITY_MESSAGE;
DROP TABLE IF EXISTS COMMUNITY_TOPIC;
DROP TABLE IF EXISTS COMMUNITY_TOPIC_REPLY;
DROP TABLE IF EXISTS CUSTOMER_DATUM;
DROP TABLE IF EXISTS CUSTOMER_MANAGER;
DROP TABLE IF EXISTS CUSTOMER_MEDIA;
DROP TABLE IF EXISTS CUSTOMER_ORDERS;
DROP TABLE IF EXISTS GOODS_COMMENTARY;
DROP TABLE IF EXISTS GOODS_DETAILS;
DROP TABLE IF EXISTS GOODS_MANAGER;
DROP TABLE IF EXISTS GOODS_MEDIA;
DROP TABLE IF EXISTS GOODS_PREFERENTIAL;
DROP TABLE IF EXISTS ORDER_DISTRIBUTIONS;
DROP TABLE IF EXISTS ORDER_UPDATE;
DROP TABLE IF EXISTS ORDER_DEVELOPMENTS;
DROP TABLE IF EXISTS ORDER_LOG;
DROP TABLE IF EXISTS ORDER_MANAGER;
DROP TABLE IF EXISTS PAY_STATS;
DROP TABLE IF EXISTS PAY_ANNUAL;
DROP TABLE IF EXISTS PAY_BILLS;
DROP TABLE IF EXISTS PAY_DAILY;
DROP TABLE IF EXISTS PAY_MONTH;
DROP TABLE IF EXISTS PAY_QUARTERLY;
DROP TABLE IF EXISTS PROVIDE_SETTLEMENT;
DROP TABLE IF EXISTS PROVIDE_SETTLEMENT;
DROP TABLE IF EXISTS PROVIDE_GOODS;
DROP TABLE IF EXISTS PROVIDE_MEDIA;
DROP TABLE IF EXISTS PROVIDE_SUPPLIER;
DROP TABLE IF EXISTS SYS_DEPARTMENT;
DROP TABLE IF EXISTS SYS_DICTIONARY;
DROP TABLE IF EXISTS SYS_FEEDBACK;
DROP TABLE IF EXISTS SYS_GROUP_PERMISSIONS;
DROP TABLE IF EXISTS SYS_GROUP_USERS;
DROP TABLE IF EXISTS SYS_GROUP_ROLE;
DROP TABLE IF EXISTS SYS_GROUP;
DROP TABLE IF EXISTS SYS_INTRODUCTIONS;
DROP TABLE IF EXISTS SYS_LOG;
DROP TABLE IF EXISTS SYS_MAP_MARK;
DROP TABLE IF EXISTS SYS_MEDIA;
DROP TABLE IF EXISTS SYS_PERMISSIONS;
DROP TABLE IF EXISTS SYS_MENU;
DROP TABLE IF EXISTS SYS_ROLE;
DROP TABLE IF EXISTS SYS_USER_LOG;
DROP TABLE IF EXISTS SYS_USER;




/* Create Tables */

CREATE TABLE COMMENTARY_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_ACTIVITY
(
	ID CHAR(32) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(100),
	BEGIN_TIME DATETIME,
	END_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_ATTENTION
(
	ID CHAR(32) NOT NULL,
	FK_CUSTOMER_MANAGERED CHAR(32),
	FK_CUSTOMER_MANAGER CHAR(32),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_GROUPS
(
	ID CHAR(32) NOT NULL,
	NAME VARCHAR(20),
	FK_CUSTOMER_MANAGER CHAR(32),
	CREATE_TIME DATETIME,
	ICON VARCHAR(100),
	INTRODUCTION VARCHAR(200),
	ENABLED CHAR(2),
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FK_SYS_MEDIA CHAR(32),
	TYPE CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_MESSAGE
(
	ID CHAR(32) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(100),
	FK_SYS_USER CHAR(32),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_TOPIC
(
	ID CHAR(32) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(100),
	RECORDING_TIME DATETIME,
	ENABLE CHAR(2),
	PRIMARY KEY (ID)
);


CREATE TABLE COMMUNITY_TOPIC_REPLY
(
	ID CHAR(32) NOT NULL,
	FK_COMMUNITY_TOPIC CHAR(32),
	FK_CUSTOMER_MANAGER CHAR(32),
	CONTENT VARCHAR(100),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE CUSTOMER_DATUM
(
	ID CHAR(32) NOT NULL,
	FK_CUSTOMER_MANAGER CHAR(32) NOT NULL,
	NAME VARCHAR(20),
	NICK_NAME VARCHAR(20),
	AGE CHAR(6),
	GENDER CHAR(6),
	BIRTHDAY DATE,
	HOMETOWN VARCHAR(100),
	RESIDENCE VARBINARY(100),
	PHONE_NUMBER CHAR(12),
	OTHERS VARBINARY(20),
	HOBBIES VARBINARY(100),
	INTRODUCTION VARBINARY(500),
	PRIMARY KEY (ID)
);


CREATE TABLE CUSTOMER_MANAGER
(
	ID CHAR(32) NOT NULL,
	LOGIN_NAME VARCHAR(20),
	PASSWORD VARCHAR(20),
	ENABLE CHAR(2),
	CREATE_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE CUSTOMER_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE CUSTOMER_ORDERS
(
	ID CHAR(32) NOT NULL,
	FK_ORDER_MANAGER CHAR(32),
	FK_CUSTOMER_MANAGER CHAR(32),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE GOODS_COMMENTARY
(
	ID CHAR(32) NOT NULL,
	CATEGORAY CHAR(32),
	FK_ORDERS_MANAGER CHAR(32),
	SCORE INT,
	TAGS VARCHAR(100),
	APPRECIATE VARCHAR(50),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE GOODS_DETAILS
(
	ID CHAR(32) NOT NULL,
	FK_GOODS_MANAGER CHAR(32),
	BRAND VARBINARY(20),
	RECORDING_TIME DATETIME,
	KGS CHAR(20),
	PROVENANCE VARBINARY(100),
	GENRE CHAR(32),
	PACKING CHAR(32),
	PACKING_LIST VARCHAR(100),
	PRIMARY KEY (ID)
);


CREATE TABLE GOODS_MANAGER
(
	ID CHAR(32) NOT NULL,
	GOODS_ID CHAR(20),
	NAME VARCHAR(20),
	SYNAPSIS VARCHAR(100),
	ORIGINAL_PRICE DOUBLE,
	PROMOTION DOUBLE,
	INVENTORY INT,
	SUCCESS_AMOUNT INT,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE GOODS_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE GOODS_PREFERENTIAL
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	TITLE VARCHAR(50),
	CONTENT VARCHAR(100),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE ORDER_DEVELOPMENTS
(
	FK_ORDERS_MANAGER CHAR(32),
	ID CHAR(32) NOT NULL,
	FK_DICTIONARY CHAR(32),
	PRIMARY KEY (ID)
);


CREATE TABLE ORDER_DISTRIBUTIONS
(
	ID CHAR(32) NOT NULL,
	FK_ORDER_DEVELOPMENTS CHAR(32),
	NAME VARCHAR(20),
	WEBSITE VARCHAR(20),
	PHONE_NUMBER CHAR(12),
	FK_ORDER_UPDATE CHAR(32),
	PRIMARY KEY (ID)
);


CREATE TABLE ORDER_LOG
(
	ID CHAR(32) NOT NULL,
	FK_USERS CHAR(32),
	FK_DICTIONARY CHAR(32),
	FK_ORDERS_MANAGER CHAR(32),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE ORDER_MANAGER
(
	ID CHAR(32) NOT NULL,
	ORDER_MANAGER_ID CHAR(20),
	FK_GOODS_MANAGER CHAR(32),
	FK_DICTIONARY CHAR(32),
	FK_SYS_USER CHAR(32),
	QUANTITY INT,
	AMOUNT INT,
	DICOUNT DOUBLE,
	TOTAL DOUBLE,
	STATUS CHAR(32),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE ORDER_UPDATE
(
	ID CHAR(32) NOT NULL,
	RECORDING_TIME DATETIME,
	CONTENT VARCHAR(100),
	FK_ORDER_DEVELOPMENTS CHAR(32) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_ANNUAL
(
	ID CHAR(32) NOT NULL,
	DAILY_SUCCESS INT(64),
	DAILY_FAIL INT(64),
	AMOUNT INT(64),
	BEGIN_TIME DATETIME,
	END_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_BILLS
(
	ID CHAR(32) NOT NULL,
	FK_CUSTOMER_MANAGER CHAR(32),
	FK_CUSTOMER_ORDERS CHAR(32),
	TURNOVER INT(64),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_DAILY
(
	ID CHAR(32) NOT NULL,
	DAILY_SUCCESS INT(64),
	DAILY_FAIL INT(64),
	AMOUNT INT(64),
	BEGIN_TIME DATETIME,
	END_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_MONTH
(
	ID CHAR(32) NOT NULL,
	DAILY_SUCCESS INT(64),
	DAILY_FAIL INT(64),
	AMOUNT INT(64),
	BEGIN_TIME DATETIME,
	END_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_QUARTERLY
(
	ID CHAR(32) NOT NULL,
	DAILY_SUCCESS INT(64),
	DAILY_FAIL INT(64),
	AMOUNT INT(64),
	BEGIN_TIME DATETIME,
	END_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PAY_STATS
(
	ID CHAR(32) NOT NULL,
	BEGIN_TIME DATETIME,
	FK_PAY_DAILY CHAR(32),
	FK_PAY_MONTH CHAR(32),
	FK_PAY_QUARTERLY CHAR(32),
	FK_PAY_ANNUAL CHAR(32),
	END_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PROVIDE_GOODS
(
	ID CHAR(32) NOT NULL,
	FK_PROVIDE_SUPPLIER CHAR(32),
	BATCH_NUMBER CHAR(20),
	NAME VARCHAR(20),
	UNIVALENCE DOUBLE,
	AMOUNT INT,
	DICOUNT DOUBLE,
	TOTAL DOUBLE,
	STATUS CHAR(32),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE PROVIDE_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE PROVIDE_SETTLEMENT
(
	ID CHAR(32) NOT NULL,
	FK_PROVIDE_GOODS CHAR(32),
	FK_PROVIDE_SUPPLIER CHAR(32),
	STATUS CHAR(32),
	PAYABLE DOUBLE,
	REAL_PAID DOUBLE,
	FK_SYS_USER CHAR(32),
	RECORDING_TIME DATETIME,
	PROCESSED CHAR(32),
	PRIMARY KEY (ID)
);


CREATE TABLE PROVIDE_SETTLEMENT
(
	ID CHAR(32) NOT NULL,
	FK_PROVIDE_GOODS CHAR(32),
	FK_PROVIDE_SUPPLIER CHAR(32),
	GENRE CHAR(32),
	CONTENT VARCHAR(100),
	AMOUNT INT,
	FK_SYS_USER CHAR(32),
	RECORDING_TIME DATETIME,
	FK_SYS_USER CHAR(32),
	UPDATE_TIME DATETIME,
	PROCESSED CHAR(32),
	PRIMARY KEY (ID)
);


CREATE TABLE PROVIDE_SUPPLIER
(
	ID CHAR(32) NOT NULL,
	FK_SYS_DEPARTMENT CHAR(32),
	SUPERINTENDENT VARCHAR(20),
	PHONE_NUMBER CHAR(12),
	OTHERS VARBINARY(20),
	BANK_NAME VARCHAR(100),
	ACCOUNT CHAR(20),
	ADDRESS VARCHAR(100),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_DEPARTMENT
(
	ID CHAR(32) NOT NULL,
	PARENT CHAR(32) NOT NULL,
	DEPARTMENT_ID CHAR(20),
	NAME VARCHAR(20),
	WEBSITE VARCHAR(20),
	PHONE_NUMBER CHAR(12),
	E_MAIL VARCHAR(30),
	ADDRESS VARCHAR(100),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_DICTIONARY
(
	ID CHAR(32) NOT NULL,
	PARENT CHAR(32) NOT NULL,
	DICTIONARY_ID CHAR(20),
	NAME VARCHAR(20),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_FEEDBACK
(
	ID CHAR(32) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(1000),
	NAME VARCHAR(20),
	PHONE_NUMBER CHAR(12),
	CREATE_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_GROUP
(
	ID CHAR(32) NOT NULL,
	NAME VARCHAR(20) NOT NULL,
	INTRODUCTION VARCHAR(500),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_GROUP_PERMISSIONS
(
	ID CHAR(32) NOT NULL,
	FK_SYS_GROUP CHAR(32) NOT NULL,
	ENABLE CHAR(2),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_GROUP_ROLE
(
	ID CHAR(32) NOT NULL,
	ROLE_ID CHAR(20),
	FK_SYS_GROUP CHAR(32) NOT NULL,
	NAME VARCHAR(20),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_GROUP_USERS
(
	ID CHAR(32) NOT NULL,
	FK_SYS_USER CHAR(32) NOT NULL,
	FK_SYS_PERMISSONS CHAR(32) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_INTRODUCTIONS
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	TITLE VARCHAR(50),
	CONTENT VARCHAR(1000),
	CREATE_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_LOG
(
	ID CHAR(32) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(1000),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_MAP_MARK
(
	ID CHAR(32) NOT NULL,
	LONGITUDE DOUBLE,
	LATITUDE DOUBLE,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(100),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_MEDIA
(
	ID CHAR(32) NOT NULL,
	LINKED_ID CHAR(32),
	FILE_PATH VARCHAR(200),
	FILE_SIZE CHAR(20),
	ENABLE CHAR(2),
	RECORDING_TIME DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_MENU
(
	ID CHAR(32) NOT NULL,
	MENU_ID CHAR(20) NOT NULL,
	PARENT CHAR(32) NOT NULL,
	NAME VARCHAR(20) NOT NULL,
	URL VARCHAR(500),
	ENABLE CHAR(2),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_PERMISSIONS
(
	ID CHAR(32) NOT NULL,
	FK_SYS_USER CHAR(32) NOT NULL,
	FK_SYS_MENU CHAR(32) NOT NULL,
	ENABLE CHAR(2),
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_ROLE
(
	ID CHAR(32) NOT NULL,
	ROLE_ID CHAR(20),
	FK_SYS_USER CHAR(32) NOT NULL,
	NAME VARCHAR(20),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_USER
(
	ID CHAR(32) NOT NULL,
	LOGIN_NAME VARCHAR(20) NOT NULL,
	PASSWORD VARCHAR(20) NOT NULL,
	ENABLE CHAR(2),
	CREATE_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);


CREATE TABLE SYS_USER_LOG
(
	ID CHAR(32) NOT NULL,
	FK_SYS_USER CHAR(32) NOT NULL,
	CONTENT VARCHAR(1000),
	RECORDING_TIME DATETIME,
	REMARKS VARCHAR(50),
	PRIMARY KEY (ID)
);



/* Create Foreign Keys */

ALTER TABLE CUSTOMER_DATUM
	ADD FOREIGN KEY (FK_CUSTOMER_MANAGER)
	REFERENCES CUSTOMER_MANAGER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GOODS_COMMENTARY
	ADD FOREIGN KEY (FK_ORDERS_MANAGER)
	REFERENCES GOODS_MANAGER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GOODS_DETAILS
	ADD FOREIGN KEY (FK_GOODS_MANAGER)
	REFERENCES GOODS_MANAGER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_DISTRIBUTIONS
	ADD FOREIGN KEY (FK_ORDER_DEVELOPMENTS)
	REFERENCES ORDER_DEVELOPMENTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_UPDATE
	ADD FOREIGN KEY (FK_ORDER_DEVELOPMENTS)
	REFERENCES ORDER_DEVELOPMENTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CUSTOMER_ORDERS
	ADD FOREIGN KEY (FK_ORDER_MANAGER)
	REFERENCES ORDER_MANAGER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_DEVELOPMENTS
	ADD FOREIGN KEY (FK_ORDERS_MANAGER)
	REFERENCES ORDER_MANAGER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PAY_STATS
	ADD FOREIGN KEY (FK_PAY_ANNUAL)
	REFERENCES PAY_ANNUAL (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PAY_STATS
	ADD FOREIGN KEY (FK_PAY_DAILY)
	REFERENCES PAY_DAILY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PAY_STATS
	ADD FOREIGN KEY (FK_PAY_MONTH)
	REFERENCES PAY_MONTH (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PAY_STATS
	ADD FOREIGN KEY (FK_PAY_QUARTERLY)
	REFERENCES PAY_QUARTERLY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROVIDE_SETTLEMENT
	ADD FOREIGN KEY (FK_PROVIDE_GOODS)
	REFERENCES PROVIDE_GOODS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROVIDE_SETTLEMENT
	ADD FOREIGN KEY (FK_PROVIDE_GOODS)
	REFERENCES PROVIDE_GOODS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROVIDE_GOODS
	ADD FOREIGN KEY (FK_PROVIDE_SUPPLIER)
	REFERENCES PROVIDE_SUPPLIER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROVIDE_SETTLEMENT
	ADD FOREIGN KEY (FK_PROVIDE_SUPPLIER)
	REFERENCES PROVIDE_SUPPLIER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROVIDE_SETTLEMENT
	ADD FOREIGN KEY (FK_PROVIDE_SUPPLIER)
	REFERENCES PROVIDE_SUPPLIER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_DEPARTMENT
	ADD FOREIGN KEY (PARENT)
	REFERENCES SYS_DEPARTMENT (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_DEVELOPMENTS
	ADD FOREIGN KEY (FK_DICTIONARY)
	REFERENCES SYS_DICTIONARY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_LOG
	ADD FOREIGN KEY (FK_DICTIONARY)
	REFERENCES SYS_DICTIONARY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_MANAGER
	ADD FOREIGN KEY (FK_DICTIONARY)
	REFERENCES SYS_DICTIONARY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ORDER_MANAGER
	ADD FOREIGN KEY (STATUS)
	REFERENCES SYS_DICTIONARY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_DICTIONARY
	ADD FOREIGN KEY (PARENT)
	REFERENCES SYS_DICTIONARY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_GROUP_PERMISSIONS
	ADD FOREIGN KEY (FK_SYS_GROUP)
	REFERENCES SYS_GROUP (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_GROUP_ROLE
	ADD FOREIGN KEY (FK_SYS_GROUP)
	REFERENCES SYS_GROUP (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_GROUP_USERS
	ADD FOREIGN KEY (FK_SYS_PERMISSONS)
	REFERENCES SYS_GROUP_ROLE (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_MENU
	ADD FOREIGN KEY (PARENT)
	REFERENCES SYS_MENU (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_PERMISSIONS
	ADD FOREIGN KEY (FK_SYS_MENU)
	REFERENCES SYS_MENU (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_GROUP_USERS
	ADD FOREIGN KEY (FK_SYS_USER)
	REFERENCES SYS_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_PERMISSIONS
	ADD FOREIGN KEY (FK_SYS_USER)
	REFERENCES SYS_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_ROLE
	ADD FOREIGN KEY (FK_SYS_USER)
	REFERENCES SYS_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SYS_USER_LOG
	ADD FOREIGN KEY (FK_SYS_USER)
	REFERENCES SYS_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



